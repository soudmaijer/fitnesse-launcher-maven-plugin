 ------
 Usage
 ------
 Stewart Cambridge
 ------


Configuration

%{include|source=apt/menu.apt}

* Plugin Configuration

+-----+
<project>
    [...]
    <properties>
        <!-- Any properties will be available to FitNesse using '${variable}' syntax -->
    </properties>
    [...]
    <build>
        <plugins>
            <plugin>
                <groupId>uk.co.javahelp.fitnesse</groupId>
                <artifactId>fitnesse-launcher-maven-plugin</artifactId>
                <configuration>
                    <!-- These next 8 are the default values -->
                    <port>9123</port>
                    <workingDir>${project.build.directory}/fitnesse</workingDir>
                    <root>FitNesseRoot</root>
                    <testResourceDirectory>src/test/fitnesse</testResourceDirectory>
                    <reportsDir>${workingDir}/reports</reportsDir>
                    <resultsDir>${workingDir}/results</resultsDir>
                    <summaryFile>${workingDir}/results/failsafe-summary.xml</summaryFile>
                    <createSymLink>true</createSymLink>
                    
                    <!-- Only configure 1 of the following 3 (See Advised Project Directory Structure) -->
                    <suite>MyTestSuite</suite>
                    <suite>MyTestSuite.NestedSuite</suite>
                    <test>MyTestSuite.NestedSuite.AnIndividualTest</test>
                    <!-- Also see section on Filtering Test Suites -->
                </configuration>
            </plugin>
        </plugins>
    </build>
    [...]
</project>
+-----+

** CreateSymLink Option
 
  *

    Only your project specific FitNesse tests need go under <<<src/test/fitnesse>>>.
 
  *

    By setting <<<createSymLink>>> to <<<true>>>, the plugin will
    create a {{{http://fitnesse.org/FitNesse.UserGuide.SymbolicLinks}FitNesse SymLink}}
    directly from its working directory to your test suite under <<<src/test/fitnesse>>>.
 
  *

    This is most useful when developing tests in 'wiki' mode,
    as then you can directly scm commit your changes to the wiki test pages,
    without having to also commit FitNesse server files,
    or having to <<<svn:ignore>>> the <<<ErrorLogs>>> directory etc.
 
  *

    <<This is the default.>>
 
  *

    If you prefer to copy-resources from <<<src/test/fitnesse>>> into <<</target/fitnesse>>>
    or use some other mechanism, set <<<createSymLink>>> to <<<false>>>.
                    
* Classpath Dependencies
  
** Project Scope Dependencies
  
  *

    By using <<<\<useProjectDependencies/\>>>>, all the dependencies for a given set of scopes can be configured with ease.

  *

    The dependencies (including transitive dependencies) are added to the FitNesse classpath in the same order they are specified in the project dependencies.

  *
  
    When the build is running, look for the following in the Maven output:
  
+-----+
[INFO] Using dependencies in the following scopes: [system, compile, provided, runtime, test]
+-----+

** Individually Specified Dependencies

  *

    Any individual dependency can also be specified in the <<<\<dependencies/\>>>> section of the plugin.

  *

    The dependencies (including transitive dependencies) are added to the FitNesse classpath in the same order they are specified in the plugin configuration.

  *
  
    When the build is running, look for the following in the Maven output:
  
+-----+
[INFO] Using dependencies specified in plugin config
+-----+

** Using Both Together

  *

    Individual and project scope dependency configurations can be used together, or separately; both are optional.

  *

    Individually specified dependencies will appear earlier in the classpath than those specified using scopes.

** Example Dependency Configuration

  * Also see {{{../fitnesse-launcher-java-example/index.html}Example Java Project}}

+-----+
<project>
    [...]
    <build>
        <plugins>
            <plugin>
                <groupId>uk.co.javahelp.fitnesse</groupId>
                <artifactId>fitnesse-launcher-maven-plugin</artifactId>
                <configuration>
                    <useProjectDependencies>
                        <!-- Any combination of scopes -->
                        <scope>system</scope>
                        <scope>compile</scope>
                        <scope>provided</scope>
                        <scope>runtime</scope>
                        <scope>test</scope>
                    </useProjectDependencies>
                </configuration>
                <dependencies>
                <!--
                    Any dependency (including transitive dependencies) placed here
                    will be available to FitNesse in the variable ${maven.classpath}
                -->
                </dependencies>
            </plugin>
        </plugins>
    </build>
    [...]
</project>
+-----+

* FitNesse Classpath Configuration

  *

    The FitNesse variable <<<$\{maven.classpath\}>>> is created from the dependency configurations as a series of <<<!path>>> statements.

  *

    Place the following configuration idiom on a Test Suite page, high up enough the directory structure to cover all the Test pages which need it.

+-----+
!*> '''Classpath'''
${maven.classpath}
*!
+-----+

* FitNesse Variables

  * The plugin defines the following as FitNesse Variables, accessible using '<<<$\{variable\}>>>' syntax:
  
    [maven.classpath] Configured from <<<\<dependencies\>>>> and <<<\<useProjectDependencies/\>>>>, as described above.
    
    [artifact] The artifact name of the end-user project.
    
    [version] The version of the end-user project.
    
    [basedir] The canonical filesystem path to the end-user project base directory (containing the <<<pom.xml>>>).
    
    [Any project properties] As configured in the <<<\<properties\>>>> section of the <<<pom.xml>>>. Can be overridden on command line using '<<<-Dname=value>>>', but a default value must be configured in the <<<pom.xml>>> first, for this to be picked up.
    
  * When the build is running, look for the following in the Maven output:
  
+-----+
[INFO] Setting FitNesse variable [x] to [y]
+-----+

